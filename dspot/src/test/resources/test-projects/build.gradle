description = """
Test Gradle project for DSpot test cases

Project name: dspot.gradle.java.example

"""
apply plugin: 'java'

version = "0.0.1"
sourceCompatibility = 1.7

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.apache.logging.log4j:log4j-api:2.8.2'
    compile 'org.apache.logging.log4j:log4j-core:2.8.2'
    testCompile 'junit:junit:4.12'
}

buildscript {
    repositories {
        //mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }

    configurations.maybeCreate("pitest")

    dependencies {
       classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.11'
       //pitest 'fr.inria.stamp:descartes:0.2-SNAPSHOT'
    }
}

apply plugin: 'info.solidsoft.pitest'


pitest {
    targetClasses = ['example.*']
    enableDefaultIncrementalAnalysis = true
    reportDir = 'build/pit-reports'
    outputFormats = ['CSV','HTML']


    mutators = ['ALL']

}


task printClasspath4DSpot {
    doLast {
        configurations.testRuntime.each { println it }
    }
}

buildscript {
    repositories {
        //mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }

    configurations.maybeCreate("pitest")

    dependencies {
       classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.11'
       //pitest 'fr.inria.stamp:descartes:0.2-SNAPSHOT'
    }
}

apply plugin: 'info.solidsoft.pitest'


pitest {
    targetClasses = ['example.*']
    enableDefaultIncrementalAnalysis = true
    reportDir = 'build/pit-reports'
    outputFormats = ['CSV','HTML']
    targetTests = ['example.TestSuiteExample']

    mutators = ['ALL']

}


buildscript {
    repositories {
        //mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }

    configurations.maybeCreate("pitest")

    dependencies {
       classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.11'
       //pitest 'fr.inria.stamp:descartes:0.2-SNAPSHOT'
    }
}

apply plugin: 'info.solidsoft.pitest'


pitest {
    targetClasses = ['example.*']
    enableDefaultIncrementalAnalysis = true
    reportDir = 'build/pit-reports'
    outputFormats = ['CSV','HTML']


    mutators = ['ALL']

}


task printClasspath4DSpot {
    doLast {
        configurations.testRuntime.each { println it }
    }
}

buildscript {
    repositories {
        //mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }

    configurations.maybeCreate("pitest")

    dependencies {
       classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.11'
       //pitest 'fr.inria.stamp:descartes:0.2-SNAPSHOT'
    }
}

apply plugin: 'info.solidsoft.pitest'


pitest {
    targetClasses = ['example.*']
    enableDefaultIncrementalAnalysis = true
    reportDir = 'build/pit-reports'
    outputFormats = ['CSV','HTML']
    targetTests = ['example.TestSuiteExample']

    mutators = ['ALL']

}


buildscript {
    repositories {
        //mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }

    configurations.maybeCreate("pitest")

    dependencies {
       classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.11'
       //pitest 'fr.inria.stamp:descartes:0.2-SNAPSHOT'
    }
}

apply plugin: 'info.solidsoft.pitest'


pitest {
    targetClasses = ['example.*']
    enableDefaultIncrementalAnalysis = true
    reportDir = 'build/pit-reports'
    outputFormats = ['CSV','HTML']


    mutators = ['ALL']

}


task printClasspath4DSpot {
    doLast {
        configurations.testRuntime.each { println it }
    }
}

buildscript {
    repositories {
        //mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }

    configurations.maybeCreate("pitest")

    dependencies {
       classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.11'
       //pitest 'fr.inria.stamp:descartes:0.2-SNAPSHOT'
    }
}

apply plugin: 'info.solidsoft.pitest'


pitest {
    targetClasses = ['example.*']
    enableDefaultIncrementalAnalysis = true
    reportDir = 'build/pit-reports'
    outputFormats = ['CSV','HTML']
    targetTests = ['example.TestSuiteExample']

    mutators = ['ALL']

}
